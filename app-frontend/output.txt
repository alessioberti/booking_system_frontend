----- src/App.vue -----
<template>
  <router-view />
</template>

<script setup></script>


----- src/stores/auth.js -----
import { defineStore } from 'pinia';
import axios from 'axios';

// definisci uno store per la gestione dell'autenticazione
export const useAuthStore = defineStore('auth', {
  state: () => ({
    // I token sono gestiti interamente dal backend via cookie,
    // quindi qui memorizziamo solo le informazioni dell'utente
    user: null, 
    loading: false,
    error: null,
  }),
  actions: {
    async login(email, password) {
      this.loading = true;
      this.error = null;
      try {
        // richiedi un token al server; il backend imposterÃ  i cookie se il login ha successo
        const response = await axios.post(
          '/login',
          { email, password },
          { withCredentials: true }
        );
        // Supponiamo che il backend restituisca un oggetto user (es. { user: { email: "..." } })
        this.user = response.data.user;
      } catch (err) {
        this.error = err.response?.data?.error || 'Errore durante il login';
        throw err;
      } finally {
        this.loading = false;
      }
    },

    // richiedi blocklist del token (effettua il logout)
    logout() {
      axios.post('/logout', {}, { withCredentials: true })
        .catch((err) => {
          console.error('Errore durante il logout:', err);
        });
      this.user = null;
    },

    // richiedi un nuovo token
    async refreshAccessToken() {
      try {
        const response = await axios.post(
          '/refresh-token',
          {},
          { withCredentials: true }
        );
        // Se il backend restituisce eventualmente il nuovo access token (opzionale)
        return response.data.access_token;
      } catch (err) {
        this.logout();
        throw err;
      }
    },

    // verifica credenziali e aggiorna lo stato dell'utente
    async checkAuth() {
      this.loading = true;
      try {
        const response = await axios.get('/mylogin', { withCredentials: true });
        this.user = response.data;
      } catch (err) {
        try {
          await this.refreshAccessToken();
          const response = await axios.get('/mylogin', { withCredentials: true });
          this.user = response.data;
        } catch (err) {
          this.logout();
        }
      } finally {
        this.loading = false;
      }
    },
  },
});


----- src/main.js -----
import './assets/main.css'

import { createApp } from 'vue'
import { createPinia } from 'pinia'

import App from './App.vue'
import router from './router'

const app = createApp(App)

app.use(createPinia())
app.use(router)

app.mount('#app')


----- src/components/NavBar.vue -----
<template>
  <nav class="bg-gray-800 text-white">
    <router-link to="/" class="font-bold text-xl">Logo</router-link>
    <ul>
      <template v-if="isLoggedIn">
        <li>
          <router-link to="/" class="hover:underline">Home</router-link>
        </li>
        <li>
          <router-link to="/manage" class="hover:underline"
            >Prenotazioni</router-link
          >
        </li>
        <li>
          <router-link to="/account" class="hover:underline"
            >Gestione Account</router-link
          >
        </li>
      </template>
      <template v-else>
        <li>
          <router-link to="/" class="hover:underline">Home</router-link>
        </li>
        <li>
          <router-link to="/login" class="hover:underline">Login</router-link>
        </li>
      </template>
    </ul>
  </nav>
</template>

<script setup>
import { computed } from "vue";
import { useAuthStore } from "../stores/auth";

const authStore = useAuthStore();
const isLoggedIn = computed(() => authStore.user !== null);
</script>

<style></style>


----- src/components/MainLayout.vue -----
<template>
  <div>
    <Navbar />
    <main>
      <router-view />
    </main>
  </div>
</template>

<script setup>
import Navbar from "./Navbar.vue";
</script>

<style scoped></style>


----- src/service/api.js -----
// src/composables/useApi.js
import axios from 'axios';
import { useAuthStore } from '../stores/auth';

// Crea un'istanza di axios
const api = axios.create({
  baseURL: 'https://localhost:10000',
  withCredentials: true,
});

// Intercetta le richieste per aggiungere il token
api.interceptors.request.use(
  (config) => {
    const authStore = useAuthStore();
    if (authStore.accessToken) {
      config.headers.Authorization = `Bearer ${authStore.accessToken}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Intercetta le risposte per gestire errori 401
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const authStore = useAuthStore();
    const originalRequest = error.config;

    // Se il server risponde con 401 prova a fare il refresh del token
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const newToken = await authStore.refreshAccessToken();
        axios.defaults.headers.common['Authorization'] = `Bearer ${newToken}`;
        originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
        return api(originalRequest);
      } catch (err) {

        // Se il refresh fallisce, esegui il logout
        authStore.logout();
        return Promise.reject(err);
      }
    }
    return Promise.reject(error);
  }
);

export default api;


----- src/views/LoginView.vue -----
<template>
  <div>
    <form class="space-y-6" @submit.prevent="handleLogin">
      <div class="space-y-4">
        <div>
          <input
            id="email"
            type="email"
            class="input"
            v-model="email"
            required
            placeholder="Inserisci la tua email"
          />
        </div>
        <div>
          <input
            id="password"
            type="password"
            class="input"
            v-model="password"
            required
            placeholder="Inserisci la tua password"
          />
        </div>
      </div>

      <div>
        <button type="submit" class="button" :disabled="authStore.loading">
          Sign in
        </button>
      </div>
    </form>

    <div class="flex items-center justify-between">
      <router-link to="/register"> Registrati </router-link>
      <router-link to="/reset-password"> Recupera Password </router-link>
    </div>
  </div>
  <p v-if="errorMessage" class="text-red-600 text-sm">{{ errorMessage }}</p>
</template>

<script setup>
import { ref } from "vue";
import { useRouter } from "vue-router";
import { useAuthStore } from "../stores/auth";

const email = ref("");
const password = ref("");
const errorMessage = ref(null);

const authStore = useAuthStore();
const router = useRouter();

const handleLogin = async () => {
  errorMessage.value = null;
  try {
    await authStore.login(email.value, password.value);
    // Dopo il login reindirizza alla home
    router.push({ name: "home" });
  } catch (err) {
    errorMessage.value = authStore.error || "Errore di login";
  }
};
</script>

<style scoped></style>


----- src/views/HomeView.vue -----
<!-- views/HomeView.vue -->
<template>
  <div>
    <h1>Home</h1>
    <p>
      Benvenuto,
      <span v-if="user">{{ user.email }}</span>
      <span v-else>ospite</span>
    </p>
  </div>
</template>

<script setup>
import { computed } from "vue";
import { useAuthStore } from "../stores/auth";

const authStore = useAuthStore();

const user = computed(() => authStore.user);
</script>


----- src/assets/main.css -----
@import './base.css';

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  font-weight: normal;
}

a,
.green {
  text-decoration: none;
  color: hsla(160, 100%, 37%, 1);
  transition: 0.4s;
  padding: 3px;
}

@media (hover: hover) {
  a:hover {
    background-color: hsla(160, 100%, 37%, 0.2);
  }
}

@media (min-width: 1024px) {
  body {
    display: flex;
    place-items: center;
  }

  #app {
    display: grid;
    grid-template-columns: 1fr 1fr;
    padding: 0 2rem;
  }
}


----- src/assets/logo.svg -----
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 261.76 226.69"><path d="M161.096.001l-30.225 52.351L100.647.001H-.005l130.877 226.688L261.749.001z" fill="#41b883"/><path d="M161.096.001l-30.225 52.351L100.647.001H52.346l78.526 136.01L209.398.001z" fill="#34495e"/></svg>


----- src/assets/base.css -----
/* color palette from <https://github.com/vuejs/theme> */
:root {
  --vt-c-white: #ffffff;
  --vt-c-white-soft: #f8f8f8;
  --vt-c-white-mute: #f2f2f2;

  --vt-c-black: #181818;
  --vt-c-black-soft: #222222;
  --vt-c-black-mute: #282828;

  --vt-c-indigo: #2c3e50;

  --vt-c-divider-light-1: rgba(60, 60, 60, 0.29);
  --vt-c-divider-light-2: rgba(60, 60, 60, 0.12);
  --vt-c-divider-dark-1: rgba(84, 84, 84, 0.65);
  --vt-c-divider-dark-2: rgba(84, 84, 84, 0.48);

  --vt-c-text-light-1: var(--vt-c-indigo);
  --vt-c-text-light-2: rgba(60, 60, 60, 0.66);
  --vt-c-text-dark-1: var(--vt-c-white);
  --vt-c-text-dark-2: rgba(235, 235, 235, 0.64);
}

/* semantic color variables for this project */
:root {
  --color-background: var(--vt-c-white);
  --color-background-soft: var(--vt-c-white-soft);
  --color-background-mute: var(--vt-c-white-mute);

  --color-border: var(--vt-c-divider-light-2);
  --color-border-hover: var(--vt-c-divider-light-1);

  --color-heading: var(--vt-c-text-light-1);
  --color-text: var(--vt-c-text-light-1);

  --section-gap: 160px;
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-background: var(--vt-c-black);
    --color-background-soft: var(--vt-c-black-soft);
    --color-background-mute: var(--vt-c-black-mute);

    --color-border: var(--vt-c-divider-dark-2);
    --color-border-hover: var(--vt-c-divider-dark-1);

    --color-heading: var(--vt-c-text-dark-1);
    --color-text: var(--vt-c-text-dark-2);
  }
}

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  font-weight: normal;
}

body {
  min-height: 100vh;
  color: var(--color-text);
  background: var(--color-background);
  transition:
    color 0.5s,
    background-color 0.5s;
  line-height: 1.6;
  font-family:
    Inter,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Fira Sans',
    'Droid Sans',
    'Helvetica Neue',
    sans-serif;
  font-size: 15px;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


----- src/router/index.js -----
import { createRouter, createWebHistory } from 'vue-router';
import MainLayout from '../components/MainLayout.vue';
import LoginView from '../views/LoginView.vue';
//import RegisterView from '../views/RegisterView.vue';
//import ResetPassword from '../views/ResetPassword.vue';
import Home from '../views/HomeView.vue';
//import ExamSelection from '../views/ExamSelection.vue';
//import BookView from '../views/BookView.vue';
//import ManageView from '../views/ManageView.vue';
//import AccountView from '../views/AccountView.vue';
import { useAuthStore } from '../stores/auth';

const routes = [
  {
    path: '/',
    component: MainLayout,
    children: [
      { path: '', name: 'home', component: Home },
      { path: '/login', name: 'login', component: LoginView },
      //{ path: '/register', name: 'register', component: RegisterView },
      //{ path: '/reset-password', name: 'reset-password', component: ResetPassword },
      // Rotte protette, ad esempio:
      //{ path: '/account', name: 'account', component: AccountView, meta: { requiresAuth: true } },
    ],
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

// guardia per il router: se /mylogin non restituisce l'utente, vai alla pagina di login
router.beforeEach(async (to, from, next) => {
  const authStore = useAuthStore();
  if (to.meta.requiresAuth) {
    if (!authStore.user) {
      try {
        await authStore.checkAuth();
      } catch (err) {
        return next({ name: 'login' });
      }
      if (!authStore.user) {
        return next({ name: 'login' });
      }
    }
    next();
  } else {
    next();
  }
});

export default router;


